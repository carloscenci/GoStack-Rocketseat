Dependências
Para configurar o ambiente Android no Linux, iremos realizar 5 instalações principais:

Node.js;
Yarn 1;
JDK 8;
Libs gŕaficas 32 bits;
Android Studio e dependências.
Não será realizada a instalação global do react-native-cli pois ela tem causado erros. Para criar e executar nossos projetos React Native, utilizaremos os comandos via npx

####### Ubuntu (Debian) ####### 

-Instalando cURL
Certifique-se que você tenha o cURL instalado executando o seguinte comando no terminal:

        sudo apt-get install curl

-Instalando Node.js
Nesse tutorial, iremos ensinar como instalar o Node.js diretamente utilizando o cURL. Caso queira usar um package manager, você poder utilizar o nvm.

Agora com o cURL instalado, vamos instalar o Node.js utilizando os seguintes comandos:

# Usando Ubuntu
        curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -

        sudo apt-get install -y nodejs

# Usando Debian, como root
        curl -sL https://deb.nodesource.com/setup_12.x | bash -

        apt-get install -y nodejs

Após a instalação, verifique se ela foi realizada com sucesso com os comandos (execute um de cada vez):

        node -v

        npm -v

- Instalando Yarn 1
Configure os repositórios do Yarn no seu sistema:

        curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -

        echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

E execute o comando para instalar o Yarn sem instalar o Node.js novamente:

        sudo apt update && sudo apt install --no-install-recommends yarn

Após a instalação, verifique se ela foi realizada com sucesso com o comando:

        yarn -v

- Instalando JDK 8 (Java Development Kit)
Agora precisamos instalar a JDK (Java Development Kit) na versão 8 com o seguinte comando:

        sudo add-apt-repository ppa:openjdk-r/ppa

        sudo apt-get update

        sudo apt-get install openjdk-8-jdk

A versão 8 do JDK é obrigatória, não utilize versões mais recentes.

Podemos testar a instalação do JDK com o seguinte comando:

        java -version
Caso possua outras versões do java, pode selecionar a versão 8 como padrão usando o comando:

        sudo update-alternatives --config java
        
- Instalando libs gráficas
Em grande parte das vezes precisamos instalar algumas bibliotecas da versão 32 bits do Linux para conseguir emular nosso projeto. Por isso, vamos utilizar o seguinte comando:

        sudo apt-get install gcc-multilib lib32z1 lib32stdc++6
        
####### Arch Linux ####### 

-Instalando Node.js
Vamos instalar o Node.js utilizando o seguintes comando:

        sudo pacman -S nodejs yarn
        # Ou sudo pacman -S nodejs npm
        
-Instalando JDK 8 (Java Development Kit)
Agora precisamos instalar a JDK (Java Development Kit) na versão 8 com o seguinte comando:

        sudo pacman -S jdk8-openjdk
        
A versão 8 do JDK é obrigatória, não utilize versões mais recentes.

Para isso, podemos defini-lo como padrão com o seguinte comando:

        archlinux-java set java-8-openjdk
        
- Instalando libs gráficas
Em grande parte das vezes precisamos instalar algumas bibliotecas da versão 32bits do Linux para conseguir emular nosso projeto e para isso vamos utilizar o seguinte comando para habilitar o repositório multilib:

        sudo sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
        
####### Preparativos Android Studio ####### 
Android

Crie uma pasta em um local desejado para instalação da SDK. 
        Ex: ~/Android/Sdk

Anote esse caminho para ser utilizado posteriormente

Anote também o endereço de instalação do JDK 8. Exemplo:

        /usr/lib/jvm/java-8-openjdk-amd64
        
Caso não tenha certeza do caminho, busque na pasta /usr/lib/jvm/ pela pasta referente ao JDK 8, que provavelmente iniciará com java-8.

Com esses caminhos, precisamos configurar algumas variáveis ambiente em nosso sistema.
Procure pelo primeiro dos seguintes arquivos existentes no seu sistema: ~/.zshrc ou ~/.bashrc,
e adicione essas seis linhas no arquivo (de preferência no início):

Se nenhum desses arquivos existir, crie o ~/.bashrc caso utilize o Shell padrão ou ~/.zshrc caso utilize o ZSH.

        export JAVA_HOME=CAMINHO_ANOTADO_COM_SUA_VERSÃO
        export ANDROID_HOME=~/Android/Sdk
        export PATH=$PATH:$ANDROID_HOME/emulator
        export PATH=$PATH:$ANDROID_HOME/tools
        export PATH=$PATH:$ANDROID_HOME/tools/bin
        export PATH=$PATH:$ANDROID_HOME/platform-tools
        
Não esqueça de substituir o valor na linha JAVA_HOME pelo caminho que você anotou anteriormente.
Além disso, caso esteja utilizando uma pasta diferente para a SDK do Android, altere acima.

###### Instalando Android Studio ######

Acesse a página do Android Studio e clique no botão Download Android Studio.

Vá até a pasta de download e abra o arquivo tar.gz.

Esse arquivo deve possuir uma pasta android-studio dentro. Extraia essa pasta em um local de preferência (Ex.: ~/).

Após a extração, adicione a seguinte variável ambiente no seu sistema:

        export PATH=$PATH:~/android-studio/bin
        
A adição desse caminho possibilita a execução do Android Studio diretamente pelo terminal com o comando studio.sh.
Caso tenha extraído em uma pasta diferente ou alterado o nome da pasta, ajuste o path acima para o que você utilizou.
Agora, abra o terminal (reinicie se já estiver aberto) e execute o seguinte comando:

        studio.sh

